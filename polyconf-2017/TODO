rerun all benchmarks in VT1 with no X running


[![microseconds](img/microseconds.png)](https://twitter.com/rob_pike/status/878412416127606784)


```nohighlight
Crystal 0.23
  popcount 189.19k (  5.29µs) (± 1.56%)        fastest
prog_shift 150.48k (  6.65µs) (± 1.06%)   1.26× slower
    cached 124.21k (  8.05µs) (± 0.91%)   1.52× slower
  bit_elim  32.12k ( 31.14µs) (± 2.08%)   5.89× slower
cont_shift  23.93k ( 41.79µs) (± 1.35%)   7.91× slower
      to_s   1.29k (774.96µs) (± 1.37%) 146.61× slower

Crystal 0.22
  popcount 191.95k (  5.21µs) (± 8.60%)       fastest
prog_shift 139.92k (  7.15µs) (± 1.41%)  1.37× slower
    cached 123.62k (  8.09µs) (± 1.01%)  1.55× slower
  bit_elim  31.16k ( 32.09µs) (± 1.41%)  6.16× slower
cont_shift  23.38k ( 42.78µs) (± 1.09%)  8.21× slower
      to_s   4.32k (231.38µs) (± 1.39%) 44.41× slower

Crystal 0.21
  popcount 219.65k (  4.55µs) (± 1.53%)       fastest
prog_shift 177.99k (  5.62µs) (± 1.66%)  1.23× slower
    cached 122.93k (  8.13µs) (± 0.98%)  1.79× slower
  bit_elim  31.11k ( 32.14µs) (± 1.43%)  7.06× slower
cont_shift  23.21k ( 43.09µs) (± 1.27%)  9.47× slower
      to_s   4.24k (236.05µs) (± 2.17%) 51.85× slower

Crystal 0.20
  popcount 207.49k (  4.82µs) (±18.55%)        fastest
prog_shift 161.31k (   6.2µs) (± 0.89%)   1.29× slower
    cached 129.57k (  7.72µs) (± 0.58%)   1.60× slower
  bit_elim  31.38k ( 31.87µs) (± 0.32%)   6.61× slower
cont_shift  23.56k ( 42.45µs) (± 0.29%)   8.81× slower
      to_s   1.29k (778.19µs) (± 0.35%) 161.46× slower

Crystal 0.18
  popcount 326.74k (± 0.50%)        fastest
prog_shift 288.69k (± 0.50%)   1.13× slower
    cached 200.92k (± 0.49%)   1.63× slower
  bit_elim  51.43k (± 0.71%)   6.35× slower
cont_shift  47.03k (± 0.25%)   6.95× slower
      to_s   3.04k (± 0.57%) 107.33× slower

Crystal 0.17
  popcount 325.97k (± 0.53%)        fastest
prog_shift 287.39k (± 0.44%)   1.13× slower
    cached 194.06k (± 0.46%)   1.68× slower
  bit_elim  47.71k (± 0.23%)   6.83× slower
cont_shift  50.36k (± 0.53%)   6.47× slower
      to_s   3.04k (± 0.53%) 107.23× slower

Crystal 0.16
  popcount 328.05k (± 0.61%)        fastest
prog_shift 289.25k (± 0.88%)   1.13× slower
    cached  283.4k (± 0.59%)   1.16× slower
  bit_elim  47.89k (± 0.27%)   6.85× slower
cont_shift  50.98k (± 0.73%)   6.43× slower
      to_s   3.06k (± 0.17%) 107.07× slower
```


```nohighlight
Crystal 0.23 on i7-6700HQ
  popcount 188.27k (  5.31µs) (± 1.52%)        fastest
prog_shift  150.6k (  6.64µs) (± 1.39%)   1.25× slower
    cached  117.4k (  8.52µs) (± 0.59%)   1.60× slower
  bit_elim  30.72k ( 32.55µs) (± 2.43%)   6.13× slower
cont_shift  23.97k ( 41.71µs) (± 1.53%)   7.85× slower
      to_s   1.27k ( 785.6µs) (± 1.26%) 147.91× slower
```

```nohighlight

Crystal 0.20 on i7-6700HQ
  popcount 222.91k (  4.49µs) (± 1.41%)       fastest
prog_shift 184.61k (  5.42µs) (± 1.27%)  1.21× slower
    cached 140.02k (  7.14µs) (± 0.82%)  1.59× slower
  bit_elim  32.26k ( 30.99µs) (± 0.28%)  6.91× slower
cont_shift  23.79k ( 42.04µs) (± 0.41%)  9.37× slower
      to_s   7.55k (132.43µs) (± 2.98%) 29.52× slower
```
<!-- .element: class="fragment" -->

```nohighlight

Crystal 0.18 on i7-3517U ← !!!
  popcount 345.28k (± 3.31%)       fastest
prog_shift 306.29k (± 2.94%)  1.13× slower
    cached 207.46k (± 2.94%)  1.66× slower
  bit_elim  56.94k (± 1.77%)  6.06× slower
cont_shift  56.79k (± 1.14%)  6.08× slower
      to_s    3.5k (± 0.87%) 98.54× slower
```
<!-- .element: class="fragment" -->

* <span class="fragment">Crystal 0.18 treats `rand(2**62)` as `rand(2**32)` 🤦</span>


# let’s `git bisect` 0.20 → 0.23!

```nohighlight
There are only 'skip'ped commits left to test.
The first bad commit could be any of:
009d9bc98… Compiler: use a different LLVM::Context for each LLVM::Module
193225d3c… LLVM: remove global context and related functions
417514300… LLVM: `get_module_context` and `get_global_parent` were available since LLVM 3.5.0
4c6708cc0… LLVM: bind Context functions, and apply a general refactor
c60df09b5… LLVM: `get_module_identifer` and `set_module_identifier` were introduced in LLVM 3.9
We cannot bisect more!

¯\ˍ(ツ)ˍ/¯
```


## …and how does it `String#gsub`?

```crystal
class String
```

```crystal
  def gsub(hash : Hash(Char, _))
    gsub do |char|
      hash[char]? || char
    end
  end
```

```crystal
  def gsub(&block : Char -> _)
    String.build(bytesize) do |buffer|
      each_char do |my_char|
        buffer << yield my_char
      end
    end
  end
```
<!-- .element: class="fragment" -->

```crystal
end
```


# `fast_blank` vs slow blank

```ruby
class String
  def slow_blank?
    /\A[[:space:]]*\z/ === self
  end

  def new_slow_blank?
    empty? || !(/[[:^space:]]/ === self)
  end
end
```


## `fast_blank` vs new slow blank…?

```nohighlight
================== Test String Length: 0 ==================
Warming up --------------------------------------
          Fast Blank   413.184k i/100ms
  Fast ActiveSupport   398.877k i/100ms
          Slow Blank   147.941k i/100ms
      New Slow Blank   395.928k i/100ms
Calculating -------------------------------------
          Fast Blank     29.925M (± 1.1%) i/s -    149.986M in   5.012685s
  Fast ActiveSupport     29.607M (± 1.3%) i/s -    148.382M in   5.012550s
          Slow Blank      2.208M (± 1.2%) i/s -     11.096M in   5.026964s
      New Slow Blank     25.843M (± 0.9%) i/s -    129.468M in   5.010180s

Comparison:
          Fast Blank: 29924932.6 i/s
  Fast ActiveSupport: 29606940.0 i/s - same-ish: difference falls within error
      New Slow Blank: 25843115.7 i/s - 1.16x  slower
          Slow Blank:  2207560.0 i/s - 13.56x  slower
```


## …`fast_blank` vs new slow blank!

```nohighlight
================== Test String Length: 14 ==================
Warming up --------------------------------------
          Fast Blank   402.336k i/100ms
  Fast ActiveSupport   393.394k i/100ms
          Slow Blank   221.874k i/100ms
      New Slow Blank   145.214k i/100ms
Calculating -------------------------------------
          Fast Blank     26.389M (± 1.2%) i/s -    131.966M in   5.001586s
  Fast ActiveSupport     26.418M (± 1.0%) i/s -    132.180M in   5.003849s
          Slow Blank      4.528M (± 1.0%) i/s -     22.853M in   5.047845s
      New Slow Blank      2.161M (± 0.9%) i/s -     10.891M in   5.041227s

Comparison:
  Fast ActiveSupport: 26418172.4 i/s
          Fast Blank: 26388891.6 i/s - same-ish: difference falls within error
          Slow Blank:  4527725.3 i/s - 5.83x  slower
      New Slow Blank:  2160594.0 i/s - 12.23x  slower
```
